// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.58.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Future<RwLockRawSpeaker> speakerNew({required String ip, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpeakerNewConstMeta;

  Future<void> speakerConnect({required RwLockRawSpeaker x, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpeakerConnectConstMeta;

  Future<bool> speakerIsConnected({required RwLockRawSpeaker x, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpeakerIsConnectedConstMeta;

  Future<MachineInfo?> speakerGetInfo(
      {required RwLockRawSpeaker x, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpeakerGetInfoConstMeta;

  Future<double> speakerPing({required RwLockRawSpeaker x, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpeakerPingConstMeta;

  DropFnType get dropOpaqueRwLockRawSpeaker;
  ShareFnType get shareOpaqueRwLockRawSpeaker;
  OpaqueTypeFinalizer get RwLockRawSpeakerFinalizer;
}

@sealed
class RwLockRawSpeaker extends FrbOpaque {
  final Native bridge;
  RwLockRawSpeaker.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRwLockRawSpeaker;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRwLockRawSpeaker;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RwLockRawSpeakerFinalizer;
}

class MachineInfo {
  final String hostname;
  final OS os;

  MachineInfo({
    required this.hostname,
    required this.os,
  });
}

enum OS {
  MacOS,
  Windows,
  Linux,
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<RwLockRawSpeaker> speakerNew({required String ip, dynamic hint}) {
    var arg0 = _platform.api2wire_String(ip);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_speaker_new(port_, arg0),
      parseSuccessData: _wire2api_RwLockRawSpeaker,
      constMeta: kSpeakerNewConstMeta,
      argValues: [ip],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpeakerNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "speaker_new",
        argNames: ["ip"],
      );

  Future<void> speakerConnect({required RwLockRawSpeaker x, dynamic hint}) {
    var arg0 = _platform.api2wire_RwLockRawSpeaker(x);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_speaker_connect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSpeakerConnectConstMeta,
      argValues: [x],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpeakerConnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "speaker_connect",
        argNames: ["x"],
      );

  Future<bool> speakerIsConnected({required RwLockRawSpeaker x, dynamic hint}) {
    var arg0 = _platform.api2wire_RwLockRawSpeaker(x);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_speaker_is_connected(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSpeakerIsConnectedConstMeta,
      argValues: [x],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpeakerIsConnectedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "speaker_is_connected",
        argNames: ["x"],
      );

  Future<MachineInfo?> speakerGetInfo(
      {required RwLockRawSpeaker x, dynamic hint}) {
    var arg0 = _platform.api2wire_RwLockRawSpeaker(x);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_speaker_get_info(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_machine_info,
      constMeta: kSpeakerGetInfoConstMeta,
      argValues: [x],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpeakerGetInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "speaker_get_info",
        argNames: ["x"],
      );

  Future<double> speakerPing({required RwLockRawSpeaker x, dynamic hint}) {
    var arg0 = _platform.api2wire_RwLockRawSpeaker(x);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_speaker_ping(port_, arg0),
      parseSuccessData: _wire2api_f64,
      constMeta: kSpeakerPingConstMeta,
      argValues: [x],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpeakerPingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "speaker_ping",
        argNames: ["x"],
      );

  DropFnType get dropOpaqueRwLockRawSpeaker =>
      _platform.inner.drop_opaque_RwLockRawSpeaker;
  ShareFnType get shareOpaqueRwLockRawSpeaker =>
      _platform.inner.share_opaque_RwLockRawSpeaker;
  OpaqueTypeFinalizer get RwLockRawSpeakerFinalizer =>
      _platform.RwLockRawSpeakerFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  RwLockRawSpeaker _wire2api_RwLockRawSpeaker(dynamic raw) {
    return RwLockRawSpeaker.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  MachineInfo _wire2api_box_autoadd_machine_info(dynamic raw) {
    return _wire2api_machine_info(raw);
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  MachineInfo _wire2api_machine_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MachineInfo(
      hostname: _wire2api_String(arr[0]),
      os: _wire2api_os(arr[1]),
    );
  }

  MachineInfo? _wire2api_opt_box_autoadd_machine_info(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_machine_info(raw);
  }

  OS _wire2api_os(dynamic raw) {
    return OS.values[raw];
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  wire_RwLockRawSpeaker api2wire_RwLockRawSpeaker(RwLockRawSpeaker raw) {
    final ptr = inner.new_RwLockRawSpeaker();
    _api_fill_to_wire_RwLockRawSpeaker(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _RwLockRawSpeakerFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockRawSpeakerPtr);
  OpaqueTypeFinalizer get RwLockRawSpeakerFinalizer =>
      _RwLockRawSpeakerFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_RwLockRawSpeaker(
      RwLockRawSpeaker apiObj, wire_RwLockRawSpeaker wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_speaker_new(
    int port_,
    ffi.Pointer<wire_uint_8_list> ip,
  ) {
    return _wire_speaker_new(
      port_,
      ip,
    );
  }

  late final _wire_speaker_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_speaker_new');
  late final _wire_speaker_new = _wire_speaker_newPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_speaker_connect(
    int port_,
    wire_RwLockRawSpeaker x,
  ) {
    return _wire_speaker_connect(
      port_,
      x,
    );
  }

  late final _wire_speaker_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_RwLockRawSpeaker)>>('wire_speaker_connect');
  late final _wire_speaker_connect = _wire_speaker_connectPtr
      .asFunction<void Function(int, wire_RwLockRawSpeaker)>();

  void wire_speaker_is_connected(
    int port_,
    wire_RwLockRawSpeaker x,
  ) {
    return _wire_speaker_is_connected(
      port_,
      x,
    );
  }

  late final _wire_speaker_is_connectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_RwLockRawSpeaker)>>('wire_speaker_is_connected');
  late final _wire_speaker_is_connected = _wire_speaker_is_connectedPtr
      .asFunction<void Function(int, wire_RwLockRawSpeaker)>();

  void wire_speaker_get_info(
    int port_,
    wire_RwLockRawSpeaker x,
  ) {
    return _wire_speaker_get_info(
      port_,
      x,
    );
  }

  late final _wire_speaker_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_RwLockRawSpeaker)>>('wire_speaker_get_info');
  late final _wire_speaker_get_info = _wire_speaker_get_infoPtr
      .asFunction<void Function(int, wire_RwLockRawSpeaker)>();

  void wire_speaker_ping(
    int port_,
    wire_RwLockRawSpeaker x,
  ) {
    return _wire_speaker_ping(
      port_,
      x,
    );
  }

  late final _wire_speaker_pingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_RwLockRawSpeaker)>>('wire_speaker_ping');
  late final _wire_speaker_ping = _wire_speaker_pingPtr
      .asFunction<void Function(int, wire_RwLockRawSpeaker)>();

  wire_RwLockRawSpeaker new_RwLockRawSpeaker() {
    return _new_RwLockRawSpeaker();
  }

  late final _new_RwLockRawSpeakerPtr =
      _lookup<ffi.NativeFunction<wire_RwLockRawSpeaker Function()>>(
          'new_RwLockRawSpeaker');
  late final _new_RwLockRawSpeaker =
      _new_RwLockRawSpeakerPtr.asFunction<wire_RwLockRawSpeaker Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_RwLockRawSpeaker(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockRawSpeaker(
      ptr,
    );
  }

  late final _drop_opaque_RwLockRawSpeakerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockRawSpeaker');
  late final _drop_opaque_RwLockRawSpeaker = _drop_opaque_RwLockRawSpeakerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockRawSpeaker(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockRawSpeaker(
      ptr,
    );
  }

  late final _share_opaque_RwLockRawSpeakerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockRawSpeaker');
  late final _share_opaque_RwLockRawSpeaker = _share_opaque_RwLockRawSpeakerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockRawSpeaker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
